package dashboard

import (
	"os"

	"github.com/TimRobillard/handicap_tracker/views/components"
	"github.com/TimRobillard/handicap_tracker/store"
)

templ Me(u *store.UIUser, rounds [20]*store.CalcRound) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<title>Dashboard | Golf IndX</title>
			<link rel="icon" type="image/x-icon" href="/public/favicon.ico"/>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="stylesheet" href="/public/styles.css"/>
			<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
			<script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/alpinejs" defer></script>
			<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js"></script>
			<script src="https://unpkg.com/htmx.org@1.9.10"></script>
			<script src="https://unpkg.com/htmx.org@1.9.12/dist/ext/loading-states.js"></script>
			<script src="https://unpkg.com/htmx.org@1.9.12/dist/ext/response-targets.js"></script>
		</head>
		<body class="antialiased relative bg-slate-200 overflow-y-scroll">
			<main class="relative h-auto min-h-screen w-screen flex flex-col sm:flex-row">
				<a href="/dashboard/score" class="sm:hidden fixed flex items-center justify-center bottom-4 right-4 h-16 w-16 bg-green-800 text-white font-semibold text-sm rounded-full shadow-md hover:shadow-lg hover:bg-green-900"><i class="fa-solid fa-plus text-lg shadow-md"></i></a>
				@components.SideBar()
				<section class="w-full h-screen">
					<div class="hidden sm:flex p-8 items-center">
						<h2 class="font-semibold text-3xl">My IndX</h2>
						<div class="ml-auto">
							<a href="/dashboard/score" class="flex items-center justify-center h-12 w-12 bg-green-800 text-white font-semibold text-sm rounded-full shadow-md hover:shadow-lg hover:bg-green-900"><i class="fa-solid fa-plus text-lg shadow-md"></i></a>
						</div>
					</div>
					<div class="grid grid-cols-3 md:grid-cols-5 dashboard-rows gap-2 sm:gap-4 p-4 w-full">
						<div class="col-span-3 flex items-center justify-start gap-4">
							@components.ProfilePic(u.Indx, &u.ProfilePic)
							<div>
								<span class="block text-2xl font-semibold">{ u.Username }</span>
								<span class="block text-slate-700">Latest round { u.LastScore }</span>
							</div>
						</div>
						<div class="rounded-3xl col-start-1 col-end-4 row-start-4 row-end-6 md:col-start-4 md:col-end-6 md:row-start-1 md:row-end-4">
							<div class="flex flex-col bg-white rounded-3xl p-4 pr-0.5 md:h-full">
								<span class="font-semibold text-lg">Calculated Rounds</span>
								<div class="md:overflow-y-scroll">
									<ul class="md:h-full sm:overflow-y-scroll flex flex-col gap-2">
										for _, round := range(rounds) {
											if round != nil {
												@components.CalculatedRound(*round)
											}
										}
									</ul>
								</div>
							</div>
						</div>
						<div class="bg-white rounded-3xl col-span-3 row-span-2 p-4">
							<span class="md:flex-1 font-semibold text-lg">Indx</span>
							<div class="flex items-center justify-center h-full">
								<div id="chart-spinner" class="animate-spin">
									<i class="fa-solid fa-spinner text-4xl text-green-800"></i>
								</div>
								<canvas id="myChart" class="hidden"></canvas>
								<div id="chart-no-data" class="hidden text-xl text-slate-500 text-center flex-col gap-1">
									<h4 class="text-black font-bold">No Data Found</h4>
									<p class="text-md px-4">Minimum 3 rounds required to calculate your IndX</p>
								</div>
							</div>
						</div>
					</div>
				</section>
				<div class="hidden text-green-400">generate class</div>
			</main>
			<div id="app-url" class="hidden" app-url={os.Getenv("APP_URL")}></div> 
		</body>
		<script>
		 const appUrl = document.getElementById('app-url').getAttribute('app-url');
			document.addEventListener('DOMContentLoaded', 
			async () => {
				try {
					const response = await fetch(`${appUrl}/dashboard/chart/me`);
					const data = await response.json();
					if (data && data.data.length) {
						const ctx = document.getElementById('myChart');
						new Chart(ctx, {
							type: 'line',
							data: {
								labels: data.labels,
								datasets: [{
									label: '',
									data: data.data,
									borderWidth: 2,
								}]
							},
							responsive: true,
							options: {
								fill: {
									target: 'origin',
									above: 'rgb(22, 101, 52)',
								},
								pointBackgroundColor: '#F2F2F2',
								pointBorderColor: '#AAA',
								pointRadius: 4,
								borderColor: 'rgb(22, 101, 52)',
								responsive: true,
								scales: {
									y: {
										beginAtZero: true,
										min: data.min, max: data.max
									}
								},
								elements: {
									line: {
									tension: 0.2
									},
								},
								layout: {
									padding: 20
								},
								plugins: {
									legend: {
										display: false,
									}
								}
							}
						});
						ctx.classList.remove('hidden')
					} else {
						document.getElementById('chart-no-data').classList.remove('hidden');
						document.getElementById('chart-no-data').classList.add("flex");
					}
				} catch(e) {
					console.log(e)
						document.getElementById('chart-no-data').classList.remove('hidden')
						document.getElementById('chart-no-data').classList.add("flex");
				} finally {
					document.getElementById('chart-spinner').remove()
				}
			});
			// TODO move to score form
			// const scoreForm = document.getElementById('score-form');
			// const scoreInputs = document.querySelectorAll('#score-form input');
			// const scoreOut = document.getElementById('score-out');
			// const scoreIn = document.getElementById('score-in');
			// const scoreTot = document.getElementById('score-tot');
			// const saveTot = document.getElementById('save-tot');

			// scoreForm.addEventListener('input', calculateScore)

			// function calculateScore() {
			// 	let outVal = 0;
			// 	let inVal = 0;
			// 	scoreInputs.forEach(input => {
			// 		const hole = Number(input.id.split('-')[1]);
			// 		const value = Number(input.value);
			// 		if (hole < 10) {
			// 			outVal += value;
			// 			return;
			// 		}
			// 		inVal += value;
			// 	})
			// 	scoreOut.innerHTML = outVal;
			// 	scoreIn.innerHTML = inVal;
			// 	scoreTot.innerHTML = outVal + inVal;
			// 	saveTot.innerHTML = outVal + inVal;
			// }
		</script>
	</html>
}
